Universe             = vanilla
Executable           = wrapRunSelector.sh
# Note: one can either run with environment as-is or copy the libraries to
# lib and then the condor host does not need anything more than cvmfs to be
# able to run the selector.
# To copy libs:
# mkdir lib
# cp $CMSSW_BASE/lib/$SCRAM_ARCH/libAnalysismonoZ.so lib/
# cp $CMSSW_BASE/lib/$SCRAM_ARCH/AnalysismonoZ_xr* lib/
#
# This would need to be done every time you recompile of course
GetEnv               = false
# (possibly wisconsin-specifi) tell glideins to run job with access to cvmfs (via parrot)
+RequiresCVMFS       = True
# TODO: Understand why AFS is required/remove dependency
+RequiresSharedFS    = True

WhenToTransferOutput = On_Exit_Or_Evict
ShouldTransferFiles  = yes
+IsFastQueueJob      = True
request_memory       = 2000
request_disk         = 2048000
Requirements         = TARGET.Arch == "X86_64" && IsSlowSlot=!=true && (MY.RequiresSharedFS=!=true || TARGET.HasAFS_OSG) && (TARGET.HasParrotCVMFS=?=true || (TARGET.UWCMS_CVMFS_Exists  && TARGET.CMS_CVMFS_Exists))
# stop jobs from running if they blow up
periodic_hold        = (DiskUsage/1024 > 10.0*2000 ||  ImageSize/1024 > RequestMemory*2)
Analysis = WZxsec2016
Filelist = FILELIST_REPLACE
# TODO: Actually fill these properly from templates (not just sed)
NPerJob = 3
#There are 231 files for the test script
NProcesses = NUMJOBS_REPLACE

# Recommend randomizing file list so that one job does not
# end up processing a bunch of the same files that take longer
# such as Drell-Yan.  e.g.
# mv list.txt tmp && sort -R tmp > list.txt

# example: --inputs_from_file DYNano_LOandNLO.txt 2 0 -s Zselection --input_tier NanoAOD -o testZGenJets.root -a ZGen --test
Arguments            = -a $(Analysis) -s Wselection_Full --output_file $(Analysis)_$(Filelist)_$(Process).root --input_tier NanoAOD --test --inputs_from_file $(Filelist).txt $(NPerJob) $(Process) 
Transfer_Input_Files = $(Analysis)_AnalysisCode.tgz,$(Filelist).txt
output               = logs/$(Analysis)_$(Filelist)_$(Process).out
error                = logs/$(Analysis)_$(Filelist)_$(Process).err
Log                  = logs/$(Analysis)_$(Filelist)_$(Process).log

Queue $(NProcesses)

